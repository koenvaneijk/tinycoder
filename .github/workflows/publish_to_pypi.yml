name: Build, Test, Publish to PyPI, and Create Release Binaries

on:
  release:
    types: [published]

permissions:
  contents: write # Needed to write release assets

jobs:
  publish-to-pypi:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12' # Or your preferred version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel

    - name: Verify tag matches setup.py version
      run: |
        PACKAGE_VERSION=$(python setup.py --version)
        TAG_VERSION=${{ github.ref_name }}
        TAG_VERSION_CLEANED=${TAG_VERSION#v}
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION_CLEANED" ]; then
          echo "Error: setup.py version ($PACKAGE_VERSION) does not match Git tag ($TAG_VERSION_CLEANED)."
          exit 1
        fi
        echo "Version check passed: $PACKAGE_VERSION"

    - name: Build package
      run: python -m build

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  build-executables:
    needs: publish-to-pypi # Optional: make this dependent on PyPI publish success
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            asset_os_arch: linux-x86_64
            pyinstaller_target_arch: null
            python_version: '3.12'
          - os: macos-13 # Intel Macs
            asset_os_arch: macos-x86_64
            pyinstaller_target_arch: x86_64
            python_version: '3.12'
          - os: macos-14 # Apple Silicon Macs
            asset_os_arch: macos-arm64
            pyinstaller_target_arch: arm64
            python_version: '3.12'
          - os: windows-latest
            asset_os_arch: windows-x86_64
            pyinstaller_target_arch: null
            python_version: '3.12'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}
        architecture: ${{ matrix.pyinstaller_target_arch || 'x64' }}

    - name: Get clean tag version
      id: get_version
      # Use PowerShell for Windows, bash for others
      shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }}
      run: |
        $TAG_WITH_V = "${{ github.ref_name }}"
        if ($IsWindows) { # PowerShell specific syntax
          $CLEAN_VERSION = $TAG_WITH_V.TrimStart("v")
          echo "version=$CLEAN_VERSION" >> $env:GITHUB_OUTPUT
        } else { # Bash specific syntax
          CLEAN_VERSION="${TAG_WITH_V#v}"
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        }
        echo "Cleaned version: $CLEAN_VERSION" # For logging

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install . # Install your package and its dependencies

    - name: Build tinycoder executable with PyInstaller
      shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }} # Explicit shell
      run: |
        $ErrorActionPreference = "Stop" # PowerShell: make script exit on error

        $TARGET_VERSION = "${{ steps.get_version.outputs.version }}"
        $TARGET_OS_ARCH = "${{ matrix.asset_os_arch }}"
        $LAUNCHER_SCRIPT = "run_tinycoder.py" # Assuming it's at the root

        if ($IsWindows) {
          # PowerShell syntax
          $PYINSTALLER_BASE_ARGS = "--onefile"
          # For Windows, --target-arch is not typically used with PyInstaller; it builds for the runner's arch.
          # If matrix.pyinstaller_target_arch had a Windows-specific value, you'd handle it here.
          $EXECUTABLE_NAME = "tinycoder-$TARGET_VERSION-$TARGET_OS_ARCH" # .exe will be added by PyInstaller
          pyinstaller $PYINSTALLER_BASE_ARGS --name $EXECUTABLE_NAME $LAUNCHER_SCRIPT
        } else {
          # Bash syntax
          PYINSTALLER_BASE_ARGS="--onefile"
          PYINSTALLER_FULL_ARGS="$PYINSTALLER_BASE_ARGS"
          if [[ "${{ matrix.pyinstaller_target_arch }}" != "null" && "${{ runner.os }}" == "macOS" ]]; then
            PYINSTALLER_FULL_ARGS="$PYINSTALLER_BASE_ARGS --target-arch ${{ matrix.pyinstaller_target_arch }}"
          fi
          EXECUTABLE_NAME="tinycoder-$TARGET_VERSION-$TARGET_OS_ARCH"
          pyinstaller $PYINSTALLER_FULL_ARGS --name "$EXECUTABLE_NAME" $LAUNCHER_SCRIPT
        }
        
    - name: Prepare asset name and path
      id: prep_asset
      shell: bash
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        OS_ARCH="${{ matrix.asset_os_arch }}"
        
        ASSET_NAME_TINYCODER="tinycoder-${VERSION}-${OS_ARCH}"
        ASSET_PATH_TINYCODER_BASE="dist/${ASSET_NAME_TINYCODER}" # Base path without .exe

        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "ASSET_PATH_TINYCODER=${ASSET_PATH_TINYCODER_BASE}.exe" >> $GITHUB_ENV
          echo "ASSET_NAME_TINYCODER=${ASSET_NAME_TINYCODER}.exe" >> $GITHUB_ENV
        else
          echo "ASSET_PATH_TINYCODER=${ASSET_PATH_TINYCODER_BASE}" >> $GITHUB_ENV
          echo "ASSET_NAME_TINYCODER=${ASSET_NAME_TINYCODER}" >> $GITHUB_ENV
        fi
        
        echo "Listing dist directory:"
        ls -R dist/

    - name: Upload tinycoder Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.ASSET_PATH_TINYCODER }}
        asset_name: ${{ env.ASSET_NAME_TINYCODER }}
        tag: ${{ github.ref }}
        overwrite: true
        body: "TinyCoder executable for ${{ matrix.asset_os_arch }}"